/*
JavaScript module is a file that contains a few lines of code written in JavaScript.
Importing and exporting files are important parts of any programming language.
Importing functions or modules enhances the reusability of code.
When the application grows in size, maintaining a single file with all the functions and logic becomes difficult. It also hinders the process of debugging.
Therefore, it is good practice to create separate files for specific functions and later import them as per requirement.
_____________________________________________________________________________________________________________________________________________________________
There are three types of modules in Node.js:
Importing from local module:
These modules are created by the user and can be imported as:
const var = require('./filename.js'); // OR
const var = require('./path/filename.js');
Importing from core modules:
These modules are inbuilt in Node.js and can be imported as:
const var = require('fs');
Importing from third party modules:
These modules are installed using a package manager such as npm.
Examples of third party modules are express, mongoose, nodemon, etc. These are imported as:
const express = require('express');
________________________________________________________________________________________________________________________________________________________________
Diff between require() and import():
require():
require() can be called from anywhere inside the program.
Loading is synchronous 
To use the require() statement, a module must be saved with .js extension,.json or .node extension
import():
import() cannot be called conditionally, it always runs at the beginning of the file.
To use the import() statement, a module must be saved with.mjs.
ES modules can be loaded dynamically via the import() function unlike require().
*/
